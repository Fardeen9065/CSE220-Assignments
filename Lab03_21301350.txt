class Node:
  def __init__(self, e, n):
    self.element = e
    self.next = n

class LinkedList:
  
  def __init__(self, a):
  #  Design the constructor based on data type of a. If 'a' is built in python list then
  #  Creates a linked list using the values from the given array. head will refer
  #  to the Node that contains the element from a[0]
  #  Else Sets the value of head. head will refer
  # to the given LinkedList

  # Hint: Use the type() function to determine the data type of a
    self.head = None
    # To Do
    if type(a) == list:
        n = Node(a[0], None)
        self.head = n
        tail = self.head
        for i in range(1,len(a)):
           n = Node(a[i], None)
           tail.next = n
           tail = tail.next
    else:
        self.head = a


  
  # Count the number of nodes in the list
  def countNode(self):
    # To Do
    count = 0
    temp = self.head
    while temp != None:
      count += 1
      temp = temp.next
    return count
  
  # Print elements in the list
  def printList(self):
    # To Do
    temp = self.head
    while temp != None:
      if temp.next==None:
        print(temp.element, end=" ")
      else:
        print(temp.element, end=",")  
      #print(temp.element, end=",")
      temp = temp.next
    print()

  # returns the reference of the Node at the given index. For invalid index return None.
  def nodeAt(self, idx):
    # To Do
    if (idx < 0) or (idx > self.countNode()):
      return None
    count = 0
    obj = None
    temp = self.head
    while count < idx:
      count += 1
      temp = temp.next
    return temp
  
  # returns the element of the Node at the given index. For invalid idx return None.
  def get(self, idx):
    # To Do
    if (idx < 0) or (idx >= self.countNode()):
      return None
    temp = self.head
    obj = None
    count = 0
    while temp != None:
      if count == idx:
        obj = temp.element
        break
      count += 1
      temp = temp.next
    return obj
  
  # updates the element of the Node at the given index. 
  # Returns the old element that was replaced. For invalid index return None.
  # parameter: index, element
  def set(self, idx, elem):
    # To Do
    if (idx < 0) or (idx >= self.countNode()):
      return None
    temp = self.head
    new_node = Node(elem, None)
    if idx == 0:
      new_node.next = self.head.next
      head1 = self.head.element
      self.head = new_node
      return head1
    else:
      pred = self.nodeAt(idx)
      head2 = pred.element
      pred1 = self.nodeAt(idx-1)
      new_node.next = pred.next
      pred1.next = new_node
      return head2
    
    

  # returns the index of the Node containing the given element.
  # if the element does not exist in the List, return -1.
  def indexOf(self, elem):
    # To Do
    index = 0
    temp = self.head
    while temp != None:
      if temp.element == elem:
        return index
      index += 1
      temp = temp.next
    return -1
  
  # returns true if the element exists in the List, return false otherwise.
  def contains(self, elem):
    # To Do
    temp = self.head
    while temp != None:
      if temp.element == elem:
        return True
      temp = temp.next
    return False

  # Makes a duplicate copy of the given List. Returns the reference of the duplicate list.
  def copyList(self):
    # To Do
    head = None
    tail = None
    temp = self.head
    while temp != None:
      new_node = Node(temp.element,None)
      if head == None:
        head = new_node
        tail = new_node
      else:
        tail.next = new_node
        tail = new_node
      temp = temp.next
    return head


  # Makes a reversed copy of the given List. Returns the head reference of the reversed list.
  def reverseList(self):
    # To Do
    temp = self.head
    head = None
    while temp != None:
      new_node = Node(temp.element, None)
      if head == None:
        head = new_node
      else:
        new_node.next = head
        head = new_node
      temp = temp.next
    return head
  
  # inserts Node containing the given element at the given index
  # Check validity of index.
  def insert(self, elem, idx):
    # To Do
    if (idx < 0) or (idx > self.countNode()):
      return None
    temp = self.head
    new_node = Node(elem,None)
    if idx == 0:
      new_node.next = temp
      self.head = new_node
    else:
      pred = self.nodeAt(idx-1)
      new_node.next = pred.next
      pred.next = new_node
    


  # removes Node at the given index. returns element of the removed node.
  # Check validity of index. return None if index is invalid.
  def remove(self, idx):
    # To Do
    if (idx < 0) or (idx >= self.countNode()):
      return None
    removedNode = None
    if idx == 0:
      removedNode = self.head
      head1 = self.head.element
      self.head = self.head.next
      return head1
    else:
      pred = self.nodeAt(idx-1)
      removedNode = pred.next
      head2 = pred.next.element
      pred.next = removedNode.next
      return head2
    removedNode.element = None
    removedNode.next = None
    
  
  # Rotates the list to the left by 1 position.
  def rotateLeft(self):
    # To Do
    temp = self.head
    self.head = self.head.next
    tail = self.head
    while tail.next != None:
      tail = tail.next
    tail.next = temp
    temp.next = None

  
  
  # Rotates the list to the right by 1 position.
  def rotateRight(self):
    # To Do
    temp = self.head
    tail = self.head
    count = self.countNode()
    while temp.next != None:
      temp = temp.next
    self.head = temp
    i = 0
    while i < count - 2:
      temp.next = tail
      temp = tail
      tail = tail.next
      i = i + 1
    tail.next = None      