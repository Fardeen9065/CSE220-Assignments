class Node:
  def __init__(self, e, n, p):
    self.element = e
    self.next = n
    self.prev = p


class DoublyList:
  
  def __init__(self, a):
  #  Design the constructor based on data type of a. If 'a' is built in python list then
  #  Creates a linked list using the values from the given array.
    self.head = None
    # To Do
    self.head = Node(None,None,None)
    self.head.next = self.head.prev = self.head
    tail = self.head
    for i in range(len(a)):
      new_node = Node(a[i], None, None)
      new_node.next = self.head
      new_node.prev = tail
      tail.next = new_node
      self.head.prev = new_node
      tail = new_node
  
  # Counts the number of Nodes in the list
  def countNode(self):
    # To Do
    temp = self.head.next
    count = 0
    while temp != self.head:
      count += 1
      temp = temp.next
    return count
  
  # prints the elements in the list
  def forwardprint(self):
    # To Do
    temp = self.head.next
    while temp != self.head:
      if temp.next == self.head:
         print(temp.element, end="")
      else:
        print(temp.element, end = ",")
      temp = temp.next
    print()

  # prints the elements in the list backward
  def backwardprint(self):
    # To Do
    temp = self.head.prev
    while temp != self.head:
      if temp.prev == self.head:
          print(temp.element, end="")
      else:
        print(temp.element, end=",")
      temp = temp.prev
    print()

  # returns the reference of the at the given index. For invalid index return None.
  def nodeAt(self, idx):
    # To Do
    if idx == - 1:
      return self.head
    if idx == 0:
      return self.head.next

    if (idx < 0) or (idx > self.countNode()):
      return None
    temp = self.head.next
    obj = None
    count = 0
    while count < idx:
      count += 1
      temp = temp.next
    return temp


  
  # returns the index of the containing the given element. if the element does not exist in the List, return -1.
  def indexOf(self, elem):
    # To Do
    count = 0
    obj = None
    temp = self.head.next
    while temp != self.head:
      if temp.element == elem:
        return count
      count += 1
      temp = temp.next
    return -1




  # inserts containing the given element at the given index Check validity of index. 
  def insert(self, elem, idx):
    # To Do
    if (idx < 0) or (idx > self.countNode()):
      print ("Index Error")
      return -1
    #temp = self.head
    #temp1 = self.head.next
    new_node = Node(elem,None,None)
    after = self.nodeAt(idx)
    pred = after.prev
    new_node.next = after
    after.prev = new_node
    pred.next = new_node
    new_node.prev = pred

  # removes at the given index. returns element of the removed node. Check validity of index. return None if index is invalid.
  def remove(self, idx):
    # To Do
    if (idx < 0) or (idx > self.countNode()):
      return None
    removedNode = self.nodeAt(idx)
    pred = self.nodeAt(idx-1)
    succ = self.nodeAt(idx + 1)
    pred.next = succ
    succ.prev = pred
    temp = removedNode
    removedNode = None
    return temp.element
    